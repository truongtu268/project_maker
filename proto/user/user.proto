syntax = "proto3";

package user;

option go_package = "github.com/truongtu268/project_maker/proto/user";

import "third_party/google/api/annotations.proto";
import "third_party/validate/validate.proto";

service UserService {
  rpc CreateUser(CreateUserRequest) returns (UserResponse) {
    option (google.api.http) = {
      post: "/api/v1/users"
      body: "*"
    };
  }
  
  rpc GetUser(GetUserRequest) returns (UserResponse) {
    option (google.api.http) = {
      get: "/api/v1/users/{id}"
    };
  }
  
  rpc UpdateUser(UpdateUserRequest) returns (UserResponse) {
    option (google.api.http) = {
      patch: "/api/v1/users/{id}"
      body: "*"
    };
  }
  
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {
      delete: "/api/v1/users/{id}"
    };
  }
  
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/api/v1/users"
    };
  }
}

message User {
  int64 id = 1;
  string username = 2;
  string email = 3;
  string full_name = 4;
  string created_at = 5;
  string updated_at = 6;
}

message CreateUserRequest {
  string username = 1 [(validate.rules).string = {
    min_len: 3,
    max_len: 50,
    pattern: "^[a-zA-Z0-9_]+$"
  }];
  string email = 2 [(validate.rules).string = {
    min_len: 5,
    max_len: 100,
    email: true
  }];
  string password = 3 [(validate.rules).string = {
    min_len: 8,
    max_len: 100,
    pattern: "^[A-Za-z0-9@$!%*#?&]+$" // Contains letters, numbers, and special characters
  }];
  string full_name = 4 [(validate.rules).string = {
    min_len: 1,
    max_len: 100
  }];
}

message GetUserRequest {
  int64 id = 1 [(validate.rules).int64 = { gt: 0 }];
}

message UpdateUserRequest {
  int64 id = 1 [(validate.rules).int64 = { gt: 0 }];
  optional string username = 2 [(validate.rules).string = {
    min_len: 3,
    max_len: 50,
    pattern: "^[a-zA-Z0-9_]+$",
    ignore_empty: true
  }];
  optional string email = 3 [(validate.rules).string = {
    min_len: 5,
    max_len: 100,
    email: true,
    ignore_empty: true
  }];
  optional string password = 4 [(validate.rules).string = {
    min_len: 8,
    max_len: 100,
    pattern: "^[A-Za-z0-9@$!%*#?&]+$", // Contains letters, numbers, and special characters
    ignore_empty: true
  }];
  optional string full_name = 5 [(validate.rules).string = {
    min_len: 1,
    max_len: 100,
    ignore_empty: true
  }];
}

message DeleteUserRequest {
  int64 id = 1 [(validate.rules).int64 = { gt: 0 }];
}

message DeleteUserResponse {
  bool success = 1;
}

message UserResponse {
  User user = 1;
}

message ListUsersRequest {
  int32 page = 1 [(validate.rules).int32 = { gt: 0 }];
  int32 page_size = 2 [(validate.rules).int32 = { gt: 0, lte: 100 }];
}

message ListUsersResponse {
  repeated User users = 1;
  int32 total_count = 2;
} 